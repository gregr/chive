## Copyright 2010 Gregory L. Rosenblatt

## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at

##     http://www.apache.org/licenses/LICENSE-2.0

## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

_def-op (:) infix right 5
_def hd (_proc (xs) (_unpack (:) 0 xs))
_def tl (_proc (xs) (_unpack (:) 1 xs))
_def synclo-env (_proc (sc) (_unpack SynClo 0 sc))
_def synclo-frees (_proc (sc) (_unpack SynClo 1 sc))
_def synclo-form (_proc (sc) (_unpack SynClo 2 sc))
_def _quote-sym (Macro (_proc (ctx form)
  ((SynClo (_ctx) Nil (Symbol (_unbox Symbol))):
   ((SynClo (_ctx) Nil (Symbol (_unbox _unbox))):(hd (tl form)):Nil):Nil)))
_def _quote
  _proc (xs)
    _switch
      _tag xs
      ((() xs)
       ((Symbol) ((SynClo (_ctx) Nil (_quote-sym _quote-sym)):xs:Nil))
       ((Nil) (SynClo (_ctx) Nil (_quote-sym Nil)))
       ((\:) ((SynClo (_ctx) Nil (_quote-sym \:)):
              (_quote (hd xs)):(_quote (tl xs)):Nil))
       ((SynClo) (_quote (synclo-form xs))))
_def quote (Macro (_proc (ctx form) (_quote (hd (tl form)))))
_def squote (Macro (_proc (ctx form)
  ((SynClo (_ctx) Nil (quote SynClo)):(SynClo (_ctx) Nil (quote (_ctx))):
   (SynClo (_ctx) Nil (quote Nil)):
   ((SynClo (_ctx) Nil (quote quote)):(hd (tl form)):Nil):Nil)))
_def _def-macro (Macro (_proc (ctx form)
  ((squote _def):(hd (tl form)):
   ((squote Macro):((squote _proc):(tl (tl form))):Nil):Nil)))
_def-macro _def-proc (ctx form)
  ((squote _def):(hd (tl form)):((squote _proc):(tl (tl form))):Nil)

_def-proc id (x) x
_def-proc foldr-list (f rhs xs)
  _switch
    _tag xs
    (((Nil) rhs)
     ((\:) (f (hd xs) (foldr-list f rhs (tl xs)))))
_def-proc foldl-list (f lhs xs)
  _switch
    _tag xs
    (((Nil) rhs)
     ((\:) (foldl-list f (f lhs (hd xs)) (tl xs))))
_def-proc rev-append (xs ys)
  _switch
    _tag ys
    (((Nil) xs)
     ((\:) (rev-append (hd ys:xs) (tl ys))))
_def-proc reverse (xs) (rev-append Nil xs)
_def-proc append (xs ys) (rev-append ys (reverse xs))
_def-proc map-list (f xs)
  _switch
    _tag xs
    (((Nil) Nil)
     ((\:) (f (hd xs):map-list f (tl xs))))
_def-proc map-synclo (f form)
  _switch (_tag form)
    (((SynClo) (SynClo (synclo-env form) (synclo-frees form)
                 (f (synclo-form form))))
     (() (f form)))

_def-proc build-list-form (xs)
  foldr-list (_proc (fst rst) (squote (:):fst:rst:Nil)) (squote Nil) xs
_def-proc read-list-form (parser chs)
  map-synclo build-list-form (_read-bracketed-form parser "]")
_def-reader "[" read-list-form

_def-proc build-array-form (xs)
  _let () ((arv (gensym ()))) ()
    [(squote _let) [] [[arv (squote (_coll-new Array))]] []
      (append ((squote _seq):
               (map-list (_proc (xx)
                           [(squote _array-push) (squote Array) arv xx]) xs))
        [arv])]
_def-proc read-array-form (parser chs)
  map-synclo build-array-form (_read-bracketed-form parser "]")
_def-reader "#[" read-array-form

_def-proc strip-synclo (frm)
  _switch
    _tag frm
    (((SynClo) (synclo-form frm)) (() frm))
_def-proc strip-synclos (frm)
  _switch
    _tag frm
    (((\:) (map-list strip-synclos frm))
     ((SynClo) (strip-synclos (strip-synclo frm)))
     (() frm))
_def-macro _locals (ctx form) [(squote _ctx-env) (quote (_ctx))]
## _def-types
##   Bool (_Ty-Variant True False)
##   True (_Ty-Product)
##   False (_Ty-Product)
_def-proc ttl (xs) (tl (tl xs))
_def-proc tttl (xs) (tl (ttl xs))
_def-proc htl (xs) (hd (tl xs))
_def-proc httl (xs) (hd (ttl xs))
_def-proc htttl (xs) (hd (tttl xs))
_def-macro _if (ctx form)
  _let () ((cnd (htl form)) (cnsq (httl form)) (altrn (htttl form))) ()
    [(squote _switch) [(squote _tag) cnd]
     [[(squote (True)) cnsq] [(squote (False)) altrn]]]
_def-proc gensym (_) (_alias (quote \_gsym))
_def-types (Ref (_Ty-Product Any))
_def-proc ref-get (ref) (_unpack Ref 0 ref)
_def-proc ref-set (ref val) (_pack Ref 0 ref val)

_def-macro _def-tl-data (ctx form)
  _let () ((name (htl form)) (body (httl form))
           (key ([(squote quote) (gensym ())]))) ()
    [(squote _seq) [(squote _def) name key] [(squote _init-tl-data) key body]]

## todo: review the following
_def-proc default-cond-handler (cnd continue unravel) (unravel ())

_def-tl-data cond-handler-state (Ref [default-cond-handler])
_def-proc get-cond-handler-state (_) (_get-tl-data cond-handler-state)
_def-proc get-cond-handlers (_) (ref-get (_get-tl-data cond-handler-state))
_def-proc push-cond-handler (c-h)
  _let () ((ref (get-cond-handler-state ()))) ()
    ref-set ref (c-h:ref-get ref)
_def-proc pop-cond-handler (_)
  _let () ((ref (get-cond-handler-state ()))) ()
    ref-set ref (tl (ref-get ref))
_def-proc set-cond-handlers (hs) (ref-set (get-cond-handler-state ()) hs)

_def-tl-data restart-state (Ref [])
_def-proc get-restarts (_) (_get-tl-data restart-state)
_def-proc push-restarts (restarts)
  _let () ((ref (get-restarts ()))) ()
    ref-set ref (restarts:(ref-get ref))
_def-proc pop-restarts (_)
  _let () ((ref (get-restarts ()))) ()
    ref-set ref (tl (ref-get ref))

_def-proc apply-cond-handler (cnd hs)
  _let () ((handler (hd hs)) (rest (tl hs)))
    ((continue (_proc (_) (apply-cond-handler cnd rest)))
     (unravel (_proc (_) (_seq (set-cond-handlers hs) (_unwind)))))
    handler cnd continue unravel
_def-proc signal (cnd) (apply-cond-handler cnd (get-cond-handlers ()))

_def-macro bind-cond-handler (ctx form)
  _let () ((body (htl form)) (handler (httl form)) (altern (htttl form))
           (pop [(squote pop-cond-handler) []]) (val (gensym ()))) ()
    [(squote _seq) [(squote push-cond-handler) handler]
     [(squote _catch-unwind)
      [(squote _let) [] [[val body]] [] [(squote _seq) pop val]]
      [(squote _seq) pop altern]]]

_def tc-result (Ref ())
_def-proc test-cond (xs ys)
  bind-cond-handler
    bind-cond-handler
      signal 42
      (_proc (cnd continue unravel) (continue ()))
      (_unwind)
    (_proc (cnd continue unravel)
      (_seq (ref-set tc-result (quote alt0)) (unravel ())))
    37

_def core-iface
  _export [(quote core) (quote primitives) (quote test)] [] ["["]
_def core-ns (_namespace ())
_def core (_module core-iface core-ns)
_open primitives core-ns
_file "core.chive" core-ns
_import (quote core) core core-ns

_def syms (_coll-new SymbolTable)
_pack SymbolTable (_unbox hi) syms 42
_pack SymbolTable (_unbox bye) syms "good-bye"

_def tys (_coll-new TagTable)
_pack TagTable (_tag [1]) tys "cons"
_pack TagTable (_tag []) tys "nil"

_def-proc symtab-items (tab)
  _table-fold SymbolTable tab (_proc (rhs (key _Symbol) val)
                                ([(Symbol key) val]:rhs)) []

_def-proc _type-tag (ctx sym) (_unpack Type 0 (hd (_tag-pattern ctx sym)))

_def _projections (_coll-new TagTable)
_def-proc set-projection ((tag _Type) proc)
  (_pack TagTable tag _projections proc)
_def-op (@) infixTight left 5
_def-proc (@) (nd sym) ((_unpack TagTable (_tag nd) _projections) nd sym)
_def-op (.) infixTight left 5
_def-macro (.) (ctx form)
  map-synclo
    _proc (form) [(squote \@) (htl form) [(squote quote) (httl form)]]
    form

set-projection
  _type-tag (_ctx) (quote \:)
  _proc (nd sym)
    _switch (_unpack Symbol 0 sym)
      ((((_unbox hd)) (hd nd)) (((_unbox tl)) (tl nd)))

core ## final result of bootstrap
