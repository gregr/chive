#def-op (:) infix right 5
#def hd (#proc (xs) (#node-unpack (:) 0 xs))
#def tl (#proc (xs) (#node-unpack (:) 1 xs))
#def testSwitch
  #switch (1:2:Nil)
    (((Nil) 3) ((\:) 4))
#def #quote-sym
  Macro
    #proc (ctx form)
      ((Symbol (#unbox Symbol)):
       ((Symbol (#unbox #unbox)):(hd (tl form)):Nil):Nil)
#def #quote
  #proc (xs)
    #switch xs
      ((() xs)
       ((Symbol) ((#quote-sym #quote-sym):xs:Nil))
       ((Nil) (#quote-sym Nil))
       ((\:) ((#quote-sym \:):(#quote (hd xs)):(#quote (tl xs)):Nil)))
##       ((SynClo) )
#def quote
  Macro
    #proc (ctx form)
      #quote (hd (tl form))
#def #def-macro
  Macro
    #proc (ctx form)
      ((quote #def):(hd (tl form)):((quote Macro):((quote #proc):(tl (tl form))):Nil):Nil)
#def-macro #def-proc (ctx form)
  ((quote #def):(hd (tl form)):((quote #proc):(tl (tl form))):Nil)
#def-proc id (x) x
#def-proc rev-append (xs ys)
  #switch ys
    (((Nil) xs)
     ((\:) (rev-append (hd ys:xs) (tl ys))))
#def-proc reverse (xs) (rev-append Nil xs)
#def-proc map (f xs)
  #switch xs
    (((Nil) Nil)
     ((\:) (f (hd xs):map f (tl xs))))
