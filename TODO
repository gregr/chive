Copyright 2010 Gregory L. Rosenblatt

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================================================================
multimethods
case/match
field projection operator
AST pretty-printing
no ad-hoc local environment or namespace access
   they can still be explicitly constructed/passed around
debugging inspector
          should not require eval to operate on local environments
                 eval should operate on namespaces
          therefore needs implementation-specific introspection privileges
improve syntax source annotations (expression aggregates)
expansion history (fix) and source annotations for definitions

================================================================
= modules
================================================================
../ and ./ relative paths, / absolute path, otherwise use search path
more flexible environment linking
     changes in opened modules should become visible in client modules
     allow for namespace reloading
parser
        default reader as a parser with configurable read-table
        reader macros: importing/exporting them

make-foo a b c =
         module
                compound-interface
                        export (x y) (macros and types) (ops and readtable-strings)
                        export (z)
                namespace
                        import (a b c)
                        open [core std]
                        inline
                                d e f = ...
                                g = ...
                        files ["blah" "bleh"]
                        text "j k = ..."

================================================================
= conditions
================================================================
don't truncate handler stack upon finding a handler
      -unwound handlers pop themselves
derive throw and build on that
restart lists need to be segmented by interleaved handler pushes

conditions: signals/restarts
type-error hook

================================================================
= low-level
================================================================
weak ref
gc-stable ref (related?: distributed refs)
smarter thunk-creation
fix future bugs due to lack of Context.withThread where required
interpreter-agnostic expression evaluation
thread interaction with delays, module-loading, etc.

ffi:
        networking
        filesystem/stdio/os
        threads/processes/signals?

================================================================
= security
================================================================
security implications of ctx argument to macros?
         a context can list valid symbols that it may be closed over (hygiene)
limited expand privileges? sealed expansions?
hygienic macro auditing
auditing for global communication channels
safety of exceptions or conditions/restarts
resource limits
thread state

module/environment-annotated symbols rather than gensym for renaming?
privileged scope (master of the machine) contains operators to inspect/debug/modify/execute anything subordinate to it
implies virtual machine hierarchies: machines that simulate machines that simulate machines...
parent machines do not need to trust child machines

================================================================
= types
================================================================
optional automatic downcasting with warnings
structs/tuples
records/row-typing
capabilities/effects
constant/mutable regions
lifted/unlifted regions

================================================================
= startup
================================================================
current startup sequence
        boot script builds core module from primitives (optionally skip)
        start user program with core (with primitives if boot is skipped)
future startup options
        1. run a boot script to build a basic program image from primitives
        2. load and execute an existing image (possibly with less privileges)

================================================================
= future
================================================================
dependency analysis
           -driving the eval order of non-sequenced exprs/typedefs
           -searching mutually-recursive modules for missing dependencies

OOP:
  -constructors build a new record containing method closures and data attrs
  -constructor-impls take any record containing the required slots
    -inheritance:
      -new constructor applies old constructor-impl to new record type
        -allows more efficient polymorphic delegation than a layered approach
        -mixins seem easy enough
        -takes advantage of row-typing for records
        -extensibility?
  -orthogonal dynamic properties?
  -prototypes?
reflection:
  -show field names
  -show field names with short or full value descriptions
